dnl This m4 script uses quite a few divert levels, these are essentially:
dnl   1: function prototypes
dnl   2: char array in program space
dnl   3: the function list
dnl   4: function list trailer
dnl   5: (optional) function implementations 
dnl
dnl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
dnl
dnl   Copyright (c) 2007 by Christian Dietrich <stettberger@dokucode.de>
dnl   Copyright (c) 2007,2008 by Stefan Siegl <stesie@brokenpipe.de>
dnl  
dnl   This program is free software; you can redistribute it and/or modify
dnl   it under the terms of the GNU General Public License version 3 as
dnl   published by the Free Software Foundation.
dnl  
dnl   This program is distributed in the hope that it will be useful,
dnl   but WITHOUT ANY WARRANTY; without even the implied warranty of
dnl   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
dnl   GNU General Public License for more details.
dnl  
dnl   You should have received a copy of the GNU General Public License
dnl   along with this program; if not, write to the Free Software
dnl   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
dnl  
dnl   For more information on the GPL, please go to:
dnl   http://www.gnu.org/copyleft/gpl.html
dnl
divert(0)dnl
/* This file has been generated by ecmd_defs.m4 automatically.
   Please do not modify it, edit the m4 scripts instead. */

#include <avr/pgmspace.h>
#include "protocols/ecmd/parser.h"

#ifndef NULL
#define NULL ((void *) 0)
#endif

divert(1)dnl

/* Function prototypes follow */
divert(2)dnl

/* Char array definitions follow */
divert(3)dnl

/* Definition of function pointer array follows */
const struct ecmd_command_t PROGMEM ecmd_cmds[] = {
divert(-1)dnl

define(`ecmd_feature', `dnl
divert(1)int16_t parse_cmd_$1 (char *cmd, char *output, uint16_t len);
divert(2)const char PROGMEM ecmd_$1_text[] = $2;
divert(3)	{ ecmd_$1_text, parse_cmd_$1 },
divert(-1)')

define(`ecmd_ifdef', `dnl
divert(1)#ifdef $1
divert(2)#ifdef $1
divert(3)#ifdef $1
divert(-1)')

define(`ecmd_ifndef', `dnl
divert(1)#ifndef $1
divert(2)#ifndef $1
divert(3)#ifndef $1
divert(-1)')

define(`ecmd_else', `dnl
divert(1)#else
divert(2)#else
divert(3)#else
divert(-1)')

define(`ecmd_endif', `divert(1)#endif
divert(2)#endif
divert(3)#endif
divert(-1)')

divert(4)dnl
        { NULL, NULL }
};
divert(-1)dnl
dnl yippie, we're done!
