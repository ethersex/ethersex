dnl
dnl ecmd_defs.m4
dnl
dnl This m4 script uses two divert levels, these are essentially:
dnl   1: char array in program space
dnl   3: the service list
dnl
dnl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
dnl
dnl   Copyright (c) 2007 by Christian Dietrich <stettberger@dokucode.de>
dnl   Copyright (c) 2007 by Stefan Siegl <stesie@brokenpipe.de>
dnl  
dnl   This program is free software; you can redistribute it and/or modify
dnl   it under the terms of the GNU General Public License version 2 as
dnl   published by the Free Software Foundation.
dnl  
dnl   This program is distributed in the hope that it will be useful,
dnl   but WITHOUT ANY WARRANTY; without even the implied warranty of
dnl   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
dnl   GNU General Public License for more details.
dnl  
dnl   You should have received a copy of the GNU General Public License
dnl   along with this program; if not, write to the Free Software
dnl   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
dnl  
dnl   For more information on the GPL, please go to:
dnl   http://www.gnu.org/copyleft/gpl.html
dnl
divert(0)dnl
/* This file has been generated by mdns_services.m4 automatically.
   Please do not modify it, edit the m4 script instead. */
divert(1)
/* Char array definitions follow */
divert(2)
/* Service List */
static struct mdns_service services[] = {
divert(-1)dnl

mdns_feature:
arg1: used for the identifiers (e.g. PGM variable names )
arg2: service name
arg3: SRV record
arg4: optional TXT record ( can be NULL )
arg5: port of the service

define(`mdns_feature', `dnl
divert(1)const char PROGMEM mdns_$1_service[] = $2;
const char PROGMEM mdns_$1_name[] = $3;
ifelse(`NULL', $4, `', `const char PROGMEM mdns_$1_text[] = $4;')

divert(2)  { .service = mdns_$1_service, .name = mdns_$1_name, .text = ifelse(`NULL', $4, `NULL', `mdns_$1_text'), .port = $5, .state = 0},
divert(-1)')

define(`mdns_ifdef', `dnl
divert(1)#ifdef $1
divert(2)#ifdef $1
divert(-1)')

define(`mdns_ifndef', `dnl
divert(1)#ifndef $1
divert(2)#ifndef $1
divert(-1)')

define(`mdns_endif', `divert(1)#endif
divert(2)#endif
divert(-1)')

mdns_feature(workstation, "_workstation._tcp.local", CONF_HOSTNAME, NULL, 9)

mdns_ifdef(RFM12_IP_SUPPORT)
  mdns_feature(rfm12, "_rfm12._bridge.local", "bridge to rfm12 network", NULL, 0)
mdns_endif()

mdns_ifdef(ZBUS_SUPPORT)
  mdns_feature(zbus, "_zbus._bridge.local", "bridge to zbus network", NULL, 0)
mdns_endif()

mdns_ifdef(I2C_SUPPORT)
  mdns_feature(i2c, "_i2c._bridge.local", "bridge to i2c devices", NULL, 0)
mdns_endif()

mdns_ifdef(NTPD_SUPPORT)
  mdns_feature(ntpd, "_ntp._udp.local", "hardware ntpd server", NULL, 123)
mdns_endif()

mdns_ifdef(YPORT_SUPPORT)
  mdns_feature(yport, "_serial._tcp.local", "serial to tcp bridge", NULL, 7970)
mdns_endif()

mdns_ifdef(ECMD_TCP_SUPPORT)
  mdns_feature(ecmd, "_telnet._tcp.local", CONF_HOSTNAME " ecmd interface", NULL, 2701)
mdns_endif()

divert(2)dnl
  { .service = NULL, .name = NULL, .text = NULL, .port = 0, .state = 0},
};
divert(-1)dnl
dnl yippie, we're done!
