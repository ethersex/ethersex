/*
 * MainWindow.java
 *
 * Created on 19.08.2011, 18:37:45
 */
package jlome6gui;

import javax.swing.JOptionPane;
import warhog.ethersex.lome6.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.prefs.Preferences;
import javax.swing.Timer;

/**
 *
 * @author warhog@gmx.de
 */
public class MainWindow extends javax.swing.JFrame {

    Lome6 lome6 = null;
    Timer timer = null;
    Preferences prefs = null;

    /** Creates new form MainWindow */
    public MainWindow() {
	initComponents();

	lome6 = new Lome6();
	int delay = 5000;
	ActionListener taskPerformer = new ActionListener() {
	    @Override
	    public void actionPerformed(ActionEvent evt) {
		updateElements();
	    }
	};
	timer = new Timer(delay, taskPerformer);
	timer.setInitialDelay(1);

	prefs = Preferences.userNodeForPackage(Jlome6gui.class);

	this.jTextFieldHostname.setText(prefs.get("hostname", "Hostname or IP"));
	this.jTextFieldPort.setText(prefs.get("port", "2701"));
	this.jTextFieldUsername.setText(prefs.get("username", "Username"));
	this.jTextFieldPassword.setText(prefs.get("password", "Password"));
	this.jSpinnerRefresh.setValue(prefs.getInt("refresh", 5));
	this.jCheckBoxAuthentification.setSelected(prefs.getBoolean("auth", false));

	if (this.jCheckBoxAuthentification.isSelected()) {

	    this.jTextFieldUsername.setEnabled(true);
	    this.jTextFieldPassword.setEnabled(true);
	    this.jLabelUsername.setEnabled(true);
	    this.jLabelPassword.setEnabled(true);

	}

	warhog.util.swing.setDeepEnabled(this.jTabbedPane, false);

	timer.setDelay(Integer.parseInt(this.jSpinnerRefresh.getValue().toString()) * 1000);

    }


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabelHost = new javax.swing.JLabel();
        jTextFieldHostname = new javax.swing.JTextField();
        jLabelPort = new javax.swing.JLabel();
        jTextFieldPort = new javax.swing.JTextField();
        jButtonConnect = new javax.swing.JButton();
        jCheckBoxAuthentification = new javax.swing.JCheckBox();
        jLabelUsername = new javax.swing.JLabel();
        jTextFieldUsername = new javax.swing.JTextField();
        jLabelPassword = new javax.swing.JLabel();
        jTextFieldPassword = new javax.swing.JTextField();
        jButtonDisconnect = new javax.swing.JButton();
        jTabbedPane = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabelPowerState = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabelUptime = new javax.swing.JLabel();
        jLabelLome6Uptime = new javax.swing.JLabel();
        jButtonPower = new javax.swing.JButton();
        jButtonPowerLong = new javax.swing.JButton();
        jButtonReset = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabelAir = new javax.swing.JLabel();
        jLabelCPU = new javax.swing.JLabel();
        jLabelSB = new javax.swing.JLabel();
        jLabelRAM = new javax.swing.JLabel();
        jLabelPSU = new javax.swing.JLabel();
        jSpinnerRefresh = new javax.swing.JSpinner();
        jLabel9 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("jLome6gui");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jLabelHost.setText("Host:");

        jTextFieldHostname.setText("Hostname or IP");
        jTextFieldHostname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldHostnameActionPerformed(evt);
            }
        });

        jLabelPort.setText("Port:");

        jTextFieldPort.setText("2701");

        jButtonConnect.setText("Connect");
        jButtonConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConnectActionPerformed(evt);
            }
        });

        jCheckBoxAuthentification.setText("Use authentification");
        jCheckBoxAuthentification.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxAuthentificationActionPerformed(evt);
            }
        });

        jLabelUsername.setText("Username:");
        jLabelUsername.setEnabled(false);

        jTextFieldUsername.setText("Username");
        jTextFieldUsername.setEnabled(false);

        jLabelPassword.setText("Password:");
        jLabelPassword.setEnabled(false);

        jTextFieldPassword.setText("Password");
        jTextFieldPassword.setEnabled(false);
        jTextFieldPassword.setPreferredSize(new java.awt.Dimension(74, 25));
        jTextFieldPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldPasswordActionPerformed(evt);
            }
        });

        jButtonDisconnect.setText("Disconnect");
        jButtonDisconnect.setEnabled(false);
        jButtonDisconnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDisconnectActionPerformed(evt);
            }
        });

        jLabel1.setText("Power state:");

        jLabelPowerState.setText("off");

        jLabel2.setText("lome6 uptime:");

        jLabel3.setText("Uptime:");

        jLabelUptime.setText("-");

        jLabelLome6Uptime.setText("00:00");

        jButtonPower.setText("Press power button");
        jButtonPower.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPowerActionPerformed(evt);
            }
        });

        jButtonPowerLong.setText("Press power button (long)");
        jButtonPowerLong.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPowerLongActionPerformed(evt);
            }
        });

        jButtonReset.setText("Press reset button");
        jButtonReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonResetActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabelLome6Uptime))
                    .addComponent(jButtonReset)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButtonPower)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel3))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabelPowerState)
                                    .addComponent(jLabelUptime))))
                        .addGap(18, 18, 18)
                        .addComponent(jButtonPowerLong)))
                .addContainerGap(151, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(5, 5, 5)
                        .addComponent(jLabel3))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabelPowerState)
                        .addGap(5, 5, 5)
                        .addComponent(jLabelUptime)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonPower)
                    .addComponent(jButtonPowerLong))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonReset)
                .addGap(21, 21, 21)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabelLome6Uptime))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane.addTab("System Control", jPanel1);

        jLabel4.setText("Air in:");

        jLabel5.setText("CPU:");

        jLabel6.setText("Southbridge:");

        jLabel7.setText("RAM:");

        jLabel8.setText("Power supply:");

        jLabelAir.setText("-");

        jLabelCPU.setText("-");

        jLabelSB.setText("-");

        jLabelRAM.setText("-");

        jLabelPSU.setText("-");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8))
                .addGap(29, 29, 29)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelPSU)
                    .addComponent(jLabelRAM)
                    .addComponent(jLabelSB)
                    .addComponent(jLabelCPU)
                    .addComponent(jLabelAir))
                .addContainerGap(361, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabelAir))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabelCPU))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabelSB))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jLabelRAM))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jLabelPSU))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane.addTab("Thermal State", jPanel2);

        jSpinnerRefresh.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(5), Integer.valueOf(1), null, Integer.valueOf(1)));
        jSpinnerRefresh.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerRefreshStateChanged(evt);
            }
        });

        jLabel9.setText("Refresh Time (s):");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabelHost)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldHostname, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabelPort)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldPort, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonConnect)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonDisconnect))
                    .addComponent(jTabbedPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 508, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabelUsername)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(17, 17, 17)
                                .addComponent(jLabelPassword))
                            .addComponent(jCheckBoxAuthentification))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jTextFieldPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSpinnerRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(6, 6, 6)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelHost)
                    .addComponent(jLabelPort)
                    .addComponent(jTextFieldPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonConnect)
                    .addComponent(jTextFieldHostname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonDisconnect))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxAuthentification)
                    .addComponent(jSpinnerRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelUsername)
                    .addComponent(jTextFieldUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelPassword)
                    .addComponent(jTextFieldPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void jTextFieldHostnameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldHostnameActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_jTextFieldHostnameActionPerformed



private String convertTemperature(String type) {
    
    Float temperature = lome6.getTemperature(type).floatValue();
    temperature /= 10;
    return temperature.toString() + " °C";

}


private String convertUptime(Integer seconds) {

    if (seconds > 0) {

	Integer minutes = (seconds / 60) % 60;
	Integer hours = seconds / 3600;
	seconds = seconds % 60;
	Integer days = hours / 24;
	hours = hours % 24;

	return String.format("%d days, %02d:%02d", days, hours, minutes);

    } else {

	return "-";

    }

}

private void updateElements() {

    try {

	if (lome6.getPowerState())
	    this.jLabelPowerState.setText("on");
	else
	    this.jLabelPowerState.setText("off");

	this.jLabelUptime.setText(convertUptime(lome6.getUptime()));
	this.jLabelLome6Uptime.setText(convertUptime(lome6.getLome6Uptime()));
	this.jLabelAir.setText(convertTemperature(Type.AIR));
	this.jLabelPSU.setText(convertTemperature(Type.PSU));
	this.jLabelCPU.setText(convertTemperature(Type.CPU));
	this.jLabelRAM.setText(convertTemperature(Type.RAM));
	this.jLabelSB.setText(convertTemperature(Type.SB));

    } catch (Lome6Exception e) {
	

    }

}

private void jButtonConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConnectActionPerformed

    if (this.jTextFieldHostname.getText().isEmpty() ||
	this.jTextFieldPort.getText().isEmpty()) {

	JOptionPane.showMessageDialog(this, "You need to fill out at least the host and port fields.", "Error", JOptionPane.ERROR_MESSAGE);
	return;

    }

    if (this.jCheckBoxAuthentification.isSelected()) {

	if (this.jTextFieldUsername.getText().isEmpty() ||
	    this.jTextFieldPassword.getText().isEmpty()) {

	    JOptionPane.showMessageDialog(this, "You enabled authentification but did not fillout username and/or password fields.", "Error", JOptionPane.ERROR_MESSAGE);
	    return;

	}

    }

    try {

	lome6.setHost(this.jTextFieldHostname.getText());
	lome6.setPort(Integer.parseInt(this.jTextFieldPort.getText()));
	lome6.setUsername(this.jTextFieldUsername.getText());
	lome6.setPassword(this.jTextFieldPassword.getText());

	lome6.connect();

    } catch (Lome6Exception e) {

	JOptionPane.showMessageDialog(this, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
	lome6.close();
	return;

    }

    try {

	timer.start();
	
    } catch (Exception e) {


    }


    warhog.util.swing.setDeepEnabled(this.jTabbedPane, true);

    this.jButtonConnect.setEnabled(false);
    this.jButtonDisconnect.setEnabled(true);
    this.jTextFieldHostname.setEnabled(false);
    this.jTextFieldPort.setEnabled(false);
    this.jLabelHost.setEnabled(false);
    this.jLabelPort.setEnabled(false);
    this.jTextFieldUsername.setEnabled(false);
    this.jTextFieldPassword.setEnabled(false);
    this.jCheckBoxAuthentification.setEnabled(false);
    this.jLabelUsername.setEnabled(false);
    this.jLabelPassword.setEnabled(false);
    
}//GEN-LAST:event_jButtonConnectActionPerformed


private void jCheckBoxAuthentificationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxAuthentificationActionPerformed

    if (this.jCheckBoxAuthentification.isSelected()) {

	this.jTextFieldUsername.setEnabled(true);
	this.jTextFieldPassword.setEnabled(true);
	this.jLabelUsername.setEnabled(true);
	this.jLabelPassword.setEnabled(true);

    } else {

	this.jTextFieldUsername.setEnabled(false);
	this.jTextFieldPassword.setEnabled(false);
	this.jLabelUsername.setEnabled(false);
	this.jLabelPassword.setEnabled(false);

    }

}//GEN-LAST:event_jCheckBoxAuthentificationActionPerformed

private void jTextFieldPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldPasswordActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_jTextFieldPasswordActionPerformed

private void jButtonDisconnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDisconnectActionPerformed

    timer.stop();
    lome6.close();

    this.jButtonConnect.setEnabled(true);
    this.jButtonDisconnect.setEnabled(false);
    this.jTextFieldHostname.setEnabled(true);
    this.jTextFieldPort.setEnabled(true);
    this.jLabelHost.setEnabled(true);
    this.jLabelPort.setEnabled(true);
    this.jCheckBoxAuthentification.setEnabled(true);
    warhog.util.swing.setDeepEnabled(this.jTabbedPane, false);

    if (this.jCheckBoxAuthentification.isSelected()) {

        this.jTextFieldUsername.setEnabled(true);
        this.jTextFieldPassword.setEnabled(true);
	this.jLabelUsername.setEnabled(true);
	this.jLabelPassword.setEnabled(true);

    } else {

	this.jTextFieldUsername.setEnabled(false);
	this.jTextFieldPassword.setEnabled(false);
	this.jLabelUsername.setEnabled(false);
	this.jLabelPassword.setEnabled(false);

    }

}//GEN-LAST:event_jButtonDisconnectActionPerformed

private void jButtonPowerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPowerActionPerformed

    try {
	if (lome6.getPowerState() == true) {

	    Integer response = JOptionPane.showConfirmDialog(this, "Server is running. Really press power button?", "Warning", JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE);
	    if (response == JOptionPane.YES_OPTION)
		lome6.triggerPower();

	} else
	    lome6.triggerPower();

    } catch (Exception e) {

	JOptionPane.showMessageDialog(this, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);

    }

}//GEN-LAST:event_jButtonPowerActionPerformed

private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing

    prefs.put("hostname", this.jTextFieldHostname.getText());
    prefs.put("password", this.jTextFieldPassword.getText());
    prefs.put("port", this.jTextFieldPort.getText());
    prefs.put("username", this.jTextFieldUsername.getText());
    prefs.putBoolean("auth", this.jCheckBoxAuthentification.isSelected());
    prefs.putInt("refresh", Integer.parseInt(this.jSpinnerRefresh.getValue().toString()));
    lome6.close();
    
}//GEN-LAST:event_formWindowClosing

private void jButtonPowerLongActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPowerLongActionPerformed

    try {
	if (lome6.getPowerState() == true) {

	    Integer response = JOptionPane.showConfirmDialog(this, "Server is running. Really press power button long?", "Warning", JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE);
	    if (response == JOptionPane.YES_OPTION)
		lome6.triggerPowerLong();

	} else
	    lome6.triggerPowerLong();

    } catch (Exception e) {

	JOptionPane.showMessageDialog(this, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);

    }

}//GEN-LAST:event_jButtonPowerLongActionPerformed

private void jButtonResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonResetActionPerformed

    try {

	Integer response = JOptionPane.showConfirmDialog(this, "Really press reset button?", "Warning", JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE);
	if (response == JOptionPane.YES_OPTION)
	    lome6.triggerReset();

    } catch (Exception e) {

	JOptionPane.showMessageDialog(this, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);

    }

}//GEN-LAST:event_jButtonResetActionPerformed

private void jSpinnerRefreshStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerRefreshStateChanged

    timer.setDelay(Integer.parseInt(this.jSpinnerRefresh.getValue().toString()) * 1000);

}//GEN-LAST:event_jSpinnerRefreshStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
	/* Set the Nimbus look and feel */
	//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
	 * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
	 */
	try {
	    for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
		if ("Nimbus".equals(info.getName())) {
		    javax.swing.UIManager.setLookAndFeel(info.getClassName());
		    break;
		}
	    }
	} catch (ClassNotFoundException ex) {
	    java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	} catch (InstantiationException ex) {
	    java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	} catch (IllegalAccessException ex) {
	    java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	} catch (javax.swing.UnsupportedLookAndFeelException ex) {
	    java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	}
	//</editor-fold>

	/* Create and display the form */
	java.awt.EventQueue.invokeLater(new Runnable() {

	    public void run() {
		new MainWindow().setVisible(true);
	    }
	});
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonConnect;
    private javax.swing.JButton jButtonDisconnect;
    private javax.swing.JButton jButtonPower;
    private javax.swing.JButton jButtonPowerLong;
    private javax.swing.JButton jButtonReset;
    private javax.swing.JCheckBox jCheckBoxAuthentification;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelAir;
    private javax.swing.JLabel jLabelCPU;
    private javax.swing.JLabel jLabelHost;
    private javax.swing.JLabel jLabelLome6Uptime;
    private javax.swing.JLabel jLabelPSU;
    private javax.swing.JLabel jLabelPassword;
    private javax.swing.JLabel jLabelPort;
    private javax.swing.JLabel jLabelPowerState;
    private javax.swing.JLabel jLabelRAM;
    private javax.swing.JLabel jLabelSB;
    private javax.swing.JLabel jLabelUptime;
    private javax.swing.JLabel jLabelUsername;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JSpinner jSpinnerRefresh;
    private javax.swing.JTabbedPane jTabbedPane;
    private javax.swing.JTextField jTextFieldHostname;
    private javax.swing.JTextField jTextFieldPassword;
    private javax.swing.JTextField jTextFieldPort;
    private javax.swing.JTextField jTextFieldUsername;
    // End of variables declaration//GEN-END:variables
}
